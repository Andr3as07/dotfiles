#+TITLE: Andr3as07's Emacs Configuration
#+AUTHOR: Andr3as07
#+EMAIL: andr3as06@gmail.com

* Repos & Core Packages
** Melpa
Melpa is the big package repo that nearly /everything/ can be found.
It's a must for emacs confis.

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
#+END_SRC

** Setup =use-package= if it isn't already
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC

** Auto Compile
#+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :ensure t)
#+END_SRC
** Move custom variables
Move the =custom-set-variables= block into its own file

#+BEGIN_SRC emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

** Garbage Collector
Allow 20MB of memory (instead of 0.76MB) before calling garbage collection.
This means GC runs less often, which speeds up some operations.

#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 20000000)
#+END_SRC
* Core Setup
** Basic Stuff
*** Startup Screen
Disable GNU Emacs startup screen and clear the scratch buffer.

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq initial-scratch-message nil)
#+END_SRC
*** Menu bars
Switch the Menubar off by default (I like to keep everything clean)

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
#+END_SRC

... but still let me easily toggle it on/off

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c m") 'menu-bar-mode)
#+END_SRC
*** Scroll bar
Remove Scroll Bars

#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC
*** Window title
Use full-path-name for the window title

#+BEGIN_SRC emacs-lisp
(setq frame-title-format
  '((:eval (if (buffer-file-name)
    (abbreviate-file-name (buffer-file-name))
      "%b"))))
#+END_SRC
*** Colum Numbers
Show the current column

#+BEGIN_SRC emacs-lisp
(setq column-number-mode 1)
#+END_SRC

*** Prompts
Don't ask `yes/no?', ask `y/n?'.

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Comment Management
Comment or uncomment a region by hitting C+#.

#+BEGIN_SRC emacs-lisp
(defun comment-or-uncomment-region-or-line ()
  "Comments or uncomments the region or the current line if
there's no active region."
(interactive)
(let (beg end)
  (if (region-active-p)
      (setq beg (region-beginning) end (region-end))
    (setq beg (line-beginning-position) end (line-end-position)))
  (comment-or-uncomment-region beg end)))
(global-set-key (kbd "C-#") 'comment-or-uncomment-region-or-line)
#+END_SRC
*** Text Movement
Make <home> and <end> move point to the beginning and end of the line, respectively.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<home>") 'move-beginning-of-line)
(global-set-key (kbd "<end>") 'move-end-of-line)
#+END_SRC

Move cursor by camelCase

#+BEGIN_SRC emacs-lisp
(global-subword-mode 1) ; 1 for on, 0 for off

; Hide in statusline
(with-eval-after-load 'subword
  (blackout 'subword-mode))
#+END_SRC
*** Text Size
Bind C-+ and C-- to increase and decrease text size, respectively.

#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-+") 'text-scale-increase)
(define-key global-map (kbd "C-=") 'text-scale-increase)
(define-key global-map (kbd "C-_") 'text-scale-decrease)
(define-key global-map (kbd "C--") 'text-scale-decrease)
#+END_SRC
*** Text Modification
If some text is selected, and you type some text,
delete the selected text and start inserting your typed text.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode t)
#+END_SRC

Don't assume that sentences should have two spaces after periods. This ain't a typewriter.

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

*** Text Encoding
Use UTF-8 for everything

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
*** Revert File
Revert buffer without any fuss

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-o") 'revert-buffer)
#+END_SRC
*** Backup File Handling
make backup to a designated dir, mirroring the full path
source: http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html

#+BEGIN_SRC emacs-lisp
(defun my-backup-file-name (fpath)
; "Return a new file path of a given file path.
; If the new path's directories does not exist, create them."
  (let* (
        (backupRootDir "~/.cache/emacsbackup/")
        (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
        (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
        )
    (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
    backupFilePath
  )
)
(setq make-backup-file-name-function 'my-backup-file-name)

#+END_SRC
*** Autorefresh buffer on filechange
When something changes a file, automatically refresh the
buffer containing that file so they can't get out of sync.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
*** CUA Mode (For windows noobs like me)
Don't enable CUA Mode, because I want to do things "the emacs way"

#+BEGIN_SRC emacs-lisp
; (cua-mode t)
#+END_SRC

... but still let me easily toggle it on/off

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'cua-mode)
#+END_SRC
*** Saving
When saving a file in a directory that doesn't exist,
offer to (recursively) create the file's parent directories.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook
  (lambda ()
    (when buffer-file-name
      (let ((dir (file-name-directory buffer-file-name)))
	(when (and (not (file-exists-p dir))
	   (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
	     (make-directory dir t))))))
#+END_SRC

Call DELETE-TRAILING-WHITESPACE every time a buffer is saved.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

If you save a file that doesn't end with a newline, automatically append one.

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC
*** Undo/Redo
This lets you use C-x u (undo-tree-visualize) to visually walk through the changes you've made,
undo back to a certain point (or redo), and go down different branches.
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :blackout t
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))
#+END_SRC
** Themes
*** Install Themes from Repos
List of themes to install

#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :ensure t
  :defer t)
#+END_SRC

*** Load Current default theme
#+BEGIN_SRC emacs-lisp
(load-theme 'dracula t)
#+END_SRC
** Fonts
*** Set default font
#+BEGIN_SRC emacs-lisp
(set-default-font "Monospace-12")
#+END_SRC

** Window Management
** Gutter
*** Line Numbers
Switch line numbers on by default in all buffers

#+BEGIN_SRC emacs-lisp
(when (version<= "26.0.50" emacs-version )
  (global-display-line-numbers-mode))
#+END_SRC

*** Git-Gutter
#+BEGIN_SRC emacs-lisp
(global-git-gutter-mode t)

(custom-set-variables
  '(git-gutter:update-interval 2))
#+END_SRC
* Components
** Icomplete
Minibuffer enhanced completion

#+BEGIN_SRC emacs-lisp
(progn
  (require 'icomplete)
  (icomplete-mode 1)

  ;; show choices vertically
  (setq icomplete-hide-common-prefix nil)
  (setq icomplete-in-buffer t)

  (define-key icomplete-minibuffer-map (kbd "<right>") 'icomplete-forward-completions)
  (define-key icomplete-minibuffer-map (kbd "<left>") 'icomplete-backward-completions)
)
#+END_SRC
** Magit
** Dired
Add file sizes in human-readable units (KB, MB, etc) to dired buffers.

#+BEGIN_SRC
(setq-default dired-listing-switches "-alh")
#+END_SRC
* Writing
** Org Mode
Ensure org mode is loaded. Well it must be,
because this config is and org-mode file

#+BEGIN_SRC emacs-lisp
(use-package org
    :ensure t
    :config
    ;; Make sure org file code highlights correctly
    (setq org-src-fontify-natively t)

    ;; Setup Workflow states
    (setq org-todo-keywords
      '((sequence "Backlog(b)" "In Progress(p)" "On Hold(h)"  "|" "Done(d)" "Delegated(e)" "Removed(d)")
        (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f)")))
)
#+END_SRC

Htmlize to export my org files to web pages

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC

** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t)
#+END_SRC

** LaTeX
** Spell Check
I use ispell for spell checking.

#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure t
  :bind
  (("C-c w" . 'ispell-word)
   ("C-c r" . 'ispell-region)))
#+END_SRC
** Word Count
#+BEGIN_SRC emacs-lisp
(use-package wc-mode
  :ensure t)
#+END_SRC
** Auto Word Wrap
* Development
** Auto Complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :config
  (ac-config-default))
#+END_SRC
** Indentation
Prevent Extraneous Tabs

#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

More sensible indentation (2 instead of 8 spaces).

#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC

I almost always want to go to the right indentation on the next line.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC

** Brackets
Auto insert closing brackets

#+BEGIN_SRC emacs-lisp
(electric-pair-mode)
#+END_SRC

Highlight brackets

#+BEGIN_SRC emacs-lisp
(progn
  ;; turn on highlight
  (show-paren-mode 1)
  ;; Disable delay
  (setq show-paren-delay 0.0)
  ;; highlight brackets if visible, else entire expression
  (setq show-paren-style 'mixed))
#+END_SRC
** Python
Starting a python dev setup

#+BEGIN_SRC emacs-lisp
;; This should only run fully if elpy is installed
(unwind-protect
  (use-package elpy
    :ensure t))
#+END_SRC

Set default interpreter to python 3 instead of 2.
#+BEGIN_SRC emacs-lisp
(setf python-shell-interpreter "python3")
#+END_SRC
** C/C++
** JavaScript
** Yaml
Setup YAML mode for editing configs

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t)
#+END_SRC
** Json
** Html
** CSS
** Make
* Other
** Ledger
#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :ensure t
  :init
  (setq ledger-clear-whole-transactions 1)

  :mode "\.dat$")
#+END_SRC
* Helper Functions
** Zoom-Window
Saves the current state of the buffers, and then zooms the current
buffer full screen. When called again, goes back to origonal buffer
setup.
source: https://raw.githubusercontent.com/himmAllRight/dotfiles/master/emacs/config.org

#+BEGIN_SRC emacs-lisp
(setq zoom-temp-window-configuration nil)
(defun zoom-window ()
  (interactive)
  (if zoom-temp-window-configuration
      (progn
        (set-window-configuration zoom-temp-window-configuration)
	(setq zoom-temp-window-configuration nil)
        (message "Window un-zoomed"))
    (progn
      (setq zoom-temp-window-configuration (current-window-configuration))
      (delete-other-windows)
      (message "Window zoomed"))))
#+END_SRC

And the keybinding

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x z") 'zoom-window)
#+END_SRC
** Filename to clipboard
Copy the filename of the file open in the current buffer to the clipboard

#+BEGIN_SRC emacs-lisp
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC


And the keybinding

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x w") 'prelude-copy-file-name-to-clipboard)
#+END_SRC
